/*****************************************************************
* Parser tables, Generated at Sat Apr  7 10:51:30 2007
*****************************************************************/
/*
** Parser action macros
*/
#define SHIFT(co,ar)  (ar<<8|co)
#define REDUCE(co)    (co<<8|255)
#define ERROR         -1
#define GOTO(c,n)     (n<<8|(c&255))

/*
** Parser token type equates
*/
#define EOS      3
#define ASTER    8
#define OCTNUM   11
#define DECNUM   12
#define NULSYM   13
#define SYM      14

/*
** SLR(1) parser action tables
*/
static short int P1[] = {
       SHIFT('+',5),
       SHIFT('-',4),
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P2[] = {
       SHIFT(EOS,13),
       SHIFT('-',14),
       SHIFT('+',15),
       ERROR
};
static short int P3[] = {
       SHIFT(ASTER,16),
       SHIFT('/',17),
       REDUCE(2)
};
static short int P4[] = {
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P5[] = {
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P6[] = {
       REDUCE(5)
};
static short int P7[] = {
       REDUCE(13)
};
static short int P8[] = {
       REDUCE(10)
};
static short int P9[] = {
       REDUCE(11)
};
static short int P10[] = {
       REDUCE(12)
};
static short int P11[] = {
       REDUCE(14)
};
static short int P12[] = {
       REDUCE(15)
};
static short int P13[] = {
       REDUCE(1)
};
static short int P14[] = {
       SHIFT('+',5),
       SHIFT('-',4),
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P15[] = {
       SHIFT('+',5),
       SHIFT('-',4),
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P16[] = {
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P17[] = {
       SHIFT(OCTNUM,9),
       SHIFT(DECNUM,10),
       SHIFT(ASTER,7),
       SHIFT(NULSYM,11),
       SHIFT(SYM,12),
       ERROR
};
static short int P18[] = {
       REDUCE(7)
};
static short int P19[] = {
       REDUCE(6)
};
static short int P20[] = {
       SHIFT(ASTER,16),
       SHIFT('/',17),
       REDUCE(3)
};
static short int P21[] = {
       SHIFT(ASTER,16),
       SHIFT('/',17),
       REDUCE(4)
};
static short int P22[] = {
       REDUCE(8)
};
static short int P23[] = {
       REDUCE(9)
};

static short int const *parsetable[] = {
       P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, 
       P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, 
       P22, P23
};

/*
** SLR(1) parser goto tables
*/
static short int GOAL[] = {
       GOTO(-1,0)
};
static short int AEXPR[] = {
       GOTO(-1,2)
};
static short int ATERM[] = {
       GOTO(1,3),
       GOTO(14,20),
       GOTO(-1,21)
};
static short int ELEM[] = {
       GOTO(4,18),
       GOTO(5,19),
       GOTO(16,22),
       GOTO(17,23),
       GOTO(-1,6)
};
static short int VARBL[] = {
       GOTO(-1,8)
};

static struct {
   short int *go;
   int  handle;
} const gototable[] = {
   /* G1 */ { GOAL,2 },
   /* G2 */ { AEXPR,1 },
   /* G3 */ { AEXPR,3 },
   /* G4 */ { AEXPR,3 },
   /* G5 */ { ATERM,1 },
   /* G6 */ { ATERM,2 },
   /* G7 */ { ATERM,2 },
   /* G8 */ { ATERM,3 },
   /* G9 */ { ATERM,3 },
   /* G10 */ { ELEM,1 },
   /* G11 */ { ELEM,1 },
   /* G12 */ { ELEM,1 },
   /* G13 */ { ELEM,1 },
   /* G14 */ { ELEM,1 },
   /* G15 */ { VARBL,1 }
};
